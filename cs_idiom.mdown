# Computer Science Idioms

## \#



## A

* AOT
* Applicator

## B

* BCNF (3NF) Database

## C

* Cypto
* + OTP
* + Stream Ciphers (PRF)
* + - RC2/RC4
* + - Salsa20
* + 凯撒
* + DH
* + - RSA
* + - ECC -> ECDH
* + - Oakley
* + AES
* + 中间人攻击
* + IV
* + Nonce
* + 彩虹表
* + Block cipher
* + - CFB
* + - CTR
* + - CBC
* + - OFB
* + - GCM
* + - XEX
* + - ECB
* + - OCB
* + - XTS
* + ROT26
* + BASE64
* + Hill cipher
* + Rabin cryptosystem
* + Category
* + - Public Key Infrastructure
* + - Steganography and Cryptography
* + - The Random Oracle Model
* + - Lattice-based Cryptography
* + - Shannon's Theory and Cryptography
* + - Multivariate Cryptography
* + - Error Correcting Codes and Cryptography
* + - Message Authentication Code
* currying
* CPS
* Curry Howard同构
* + Curry-Howard correspondence 中 Pierce 律（等价 XM）对应 call/cc，coroutine 是 call/cc 的较弱形式。
* call/cc
* CPU
* + cache
* + MMU
* + page
* + - virtual memory page
* Category theory
* CIC (Calculus of Inductive Constructions)
* Concurrency
* + 线程(thread)
* + - thread pool
* + 协程(coroutine)
* + 自旋锁(spin-lock)
* + - 互斥(mutex)
* + - 栅栏(barrier)
* + - - `fetch_and_decrement`
* + - `test_and_set`
* + condition variable
* + lock-free
* + - CAS `compare_and_swap`/`load_linked`/`store_conditional`
* + 竞态(data race)
* + 信号量(semaphore)
* + 管程(monitor)
* + - signal
* + 条件临界区域(critical section)
* + synchronized
* + CSP
* + pi-calculus
* + Fiber
* + Job
* Collision Detection
* + aabb
* + obb
* CSP
* + [Actor-vs-CSP](https://www.zhihu.com/question/26192499)

## D

* domain
* + application domain
* + implementation domain
* delimited continuation
* + [ref](https://zhuanlan.zhihu.com/p/33399006)

## E

* evaluation
* + eager evaluation
* + lazy evaluation
* Endian
* + big
* + middle
* + little

## F

* Functor

## G

* Graphics
* + DX
* + OpenGL
* + shaders
* + - HLSL
* + - - ShaderModel 

## H

* Hoare logic
* HOL (Higher-Order Logic)

## I

* IoC 控制反转

## J

* JIT

## K


## L

* lambda calculus
* LCF (Logic for Computable Functions)
* Liskov替换原则


## M

* monad
* MVVM
* MVC
* memory network
* ML
* + SVM
* + RNN
* + CNN
* + LSTM
* + 

## N



## O

* OLTP/OLAP Database
* Optim
* + SIMD
* + GPU

## P

* proxy class
* pumping lemma
* Prefer composition over inheritance 
* PowerPC 移位按照least six bits

## Q

* QPS (query per second)

## R

* reference counting

## S

* side-effect
* Synchronization
* + Waiting for multiple objects
* + - `CreateEvent` - `WaitForMultipleObjects`
* + Named Object
* + - `CreateMutex`
* + Event Object
* + - `CreateEvent/CreateThread` - `WaitForSingleObject`
* + Mutex Object
* + - `CreateMutex` - `ReleaseMutex` - `WaitForSingleObject` - `TerminateThread`
* + Semaphore Object
* + - `CreateSemaphore` - `ReleaseSemaphore` - `WaitForSingleObject`
* + Waitable Timer Object
* + - `CreateWaitableTimer` - `SetWaitableTimer` - `WaitForSingleObject`
* + - Waitable Timer with Async
* + - - APC queue
* + Critical section object
* + - `InitializeCriticalSectionAndSpinCount` - `EnterCriticalSection` - `LeaveCriticalSection` - `DeleteCriticalSection` - `InterlockedIncrement`
* + Condition Variable
* + - `InitializeConditionVariable` - `SleepConditionVariableCS` - `WakeConditionVariable` - `WakeAllConditionVariable` - `-CS`(version)
* + One-Time Initialization
* + - `InitOnceExecuteOnce` - `InitOnceBeginInitialize`
* + Singly Linked List
* + - `InitializeSListHead` - `InterlockedPushEntrySList` - `InterlockedPopEntrySList` - `InterlockedFlushSList`
* + Timer Queue
* + - `CreateTimerQueue` - `CreateTimerQueueTimer` - `DeleteTimerQueue` - `WaitOrTimerCallback`
* + Countdown Event
* + Barrier
* System
* + [primer](https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md)
* + Scalability
* + - horizontal scaling
* + - vertical scaling
* + CAP: consistency / availability / partition tolerance (2 in 3)
* + - consistency
* + - - weak: may not see updated
* + - - final: instantly view (copy asynchronously)
* + - - strong: instantly view (copy synchronously)
* + - availability
* + - - fail-over
* + - - - active-passive: regularly send signal (no signal => switch to backup)
* + - - - active-active: balanced load
* + - - replication
* + DNS system
* + CDN system (content distribution)
* + - push/pull
* + Balance Loading
* + - 4-layer: transfer layer
* + - 7-layer: application layer
* + Reverse Proxy
* + Microservice
* + Service Discover
* + Database
* + - RDBMS (relational): ACID
* + - - master-slave copy
* + - - master-master copy
* + - - union
* + - - slice
* + - - optimization
* + - NoSQL: kv/document/list/graph DB, final consistency, soft status
* + Cache
* + - Client
* + - CDN
* + - Web server
* + - Database
* + - Application (RAM: Memcached/Redis)
* + - write-through
* + - write-back
* + Async
* + - message queue
* + - task list
* + Communication
* + - HTTP
* + - TCP
* + - UDP
* + - RPC
* + - REST
* + Security


## T

* Trampoline
* Type
* + first class : can be return-type, parameter-type, assigned to variables
* + second class : can be type of parameters, none of the other
* + third class : none of all
* 同步
* type system
* + λPω
* + HM
* + HOAS
* + λ2
* + lambda cube
* + System F
* + HOTT
* 图灵机-lambda演算-柯里s-m-n递归论-Markov算法-Post机 这几个model都是等价的

## U

* Unicode -> UCS-2/UCS-4 (code point: assign every character a unique id) (encoding/map)
* + ASCII
* + Latin-1
* + 信源编码，对字符集数字化
* UTF (UCS Transfer Format) -> UTF-8(not fix length)/16/32 (code unit) (bytes) (code point -> byte)
* + BMP (basic multilingual plane)
* + BOM
* + 信道编码，为更好的存储和传输
* unification
* + Hindley-Milner
* + Wand
* + [ref](http://blog.sciencenet.cn/blog-279072-465788.html)

## V



## W



## X



## Y

* 异步
* Yoda condition

## Z

