# Haskell Idioms

## \#
* blog
* + [GhaSShee](https://ghassheee.github.io/)

## A


## B



## C


## D



## E
* Extensions
* + [quiz](https://codegolf.stackexchange.com/questions/153744/wait-what-language-is-this)


## F



## G


## H



## I
* ImplicitParams
* + `f :: (?x::Int) -> a -> b`  and `let ?x = Bool in f`
* + [ref](https://stackoverflow.com/questions/11141600/implicit-parameter-and-function)


## J



## K


## L
* LambdaCase
* + `\x -> case x of` ==> `\case`
* + [`{- LANGUAGE LambdaCase -}`](http://storm-country.com/blog/LambdaCase)


## M



## N
* class Num now not require Show & Ord
* + [ref](https://stackoverflow.com/questions/46994665/typeclass-constraints-necessary-for-a-function-that-prints-integers-not-greater)


## O


## P
* parametricity
* + [ref](https://www.well-typed.com/blog/2015/05/parametricity/)
* + [ref](https://www.well-typed.com/blog/2015/08/parametricity-part2/)
* + [paper](http://www.cs.bham.ac.uk/~udr/papers/logical-relations-and-parametricity.pdf)
* 



## Q



## R



## S



## T



## U
* UndecidedInstance
* + Paterson condition
* + - [ref](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#instance-termination)
* + Coverage condition
* + - [ref](https://stackoverflow.com/questions/13538937/the-coverage-condition-fails)


## V



## W



## X



## Y



## Z

