# Haskell Idioms

## \#
* blog
* + [GhaSShee](https://ghassheee.github.io/)

## A
* [accursedUnutterablePerformIO](https://github.com/haskell/bytestring/blob/master/Data/ByteString/Internal.hs#L566)
* + [reddit-discussion](https://www.reddit.com/r/haskell/comments/7ykrv3/xkcds_prediction_for_a_haskellrelated_cve_in_2018/duhfa2h/)

## B



## C


## D



## E
* Extensions
* + [quiz](https://codegolf.stackexchange.com/questions/153744/wait-what-language-is-this)
* Expression problem
* + [ref](https://eli.thegreenplace.net/2016/the-expression-problem-and-its-solutions/)


## F



## G


## H



## I
* ImplicitParams
* + `f :: (?x::Int) -> a -> b`  and `let ?x = Bool in f`
* + [ref](https://stackoverflow.com/questions/11141600/implicit-parameter-and-function)


## J



## K


## L
* LambdaCase
* + `\x -> case x of` ==> `\case`
* + [`{- LANGUAGE LambdaCase -}`](http://storm-country.com/blog/LambdaCase)


## M
* MultiParamTypeClasses
```
class Monad m => VarMonad m v where
  new :: a -> m (v a)
  get :: v a -> m a
  put :: v a -> a -> m ()
```
* [ref](https://wiki.haskell.org/Multi-parameter_type_class)
* [ref-2](https://ocharles.org.uk/blog/posts/2014-12-13-multi-param-type-classes.html)


## N
* class Num now not require Show & Ord
* + [ref](https://stackoverflow.com/questions/46994665/typeclass-constraints-necessary-for-a-function-that-prints-integers-not-greater)


## O


## P
* parametricity
* + [ref](https://www.well-typed.com/blog/2015/05/parametricity/)
* + [ref](https://www.well-typed.com/blog/2015/08/parametricity-part2/)
* + [paper](http://www.cs.bham.ac.uk/~udr/papers/logical-relations-and-parametricity.pdf)
* 



## Q



## R



## S



## T



## U
* UndecidedInstance
* + Paterson condition
* + - [ref](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#instance-termination)
* + Coverage condition
* + - [ref](https://stackoverflow.com/questions/13538937/the-coverage-condition-fails)


## V



## W



## X



## Y



## Z

